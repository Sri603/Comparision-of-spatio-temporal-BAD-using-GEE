var Modis = ee.ImageCollection("MODIS/061/MCD64A1"),
    hansen = ee.Image("UMD/hansen/global_forest_change_2023_v1_11"),
    soilMoisture = ee.ImageCollection("NASA/GLDAS/V021/NOAH/G025/T3H"),
    precipitation = ee.ImageCollection("UCSB-CHG/CHIRPS/DAILY"),
    temperature = ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE"),
    mcd12q1 = ee.ImageCollection("MODIS/061/MCD12Q1"),
    NDVI = ee.ImageCollection("MODIS/061/MOD13A2"),
    elevation = ee.Image("USGS/SRTMGL1_003"),
    Aus = ee.FeatureCollection("projects/ee-sriramvasan603/assets/Australia");

// Constants
var num_points = 1000; 
var myDriveFolder = 'GEE_Exports'; 
var scale = 500; // Set the scale to 500m

var startDate = ee.Date('2021-01-01'); 
var endDate = ee.Date('2021-12-31');   

/////////////////////////////////////
// Step 1: Burn Mask Creation
/////////////////////////////////////

// Burn mask creation using MODIS and Hansen dataset
var MaskLand = hansen.select('datamask');
var Firemask = Modis
  .filterDate(startDate, endDate)
  .select(['BurnDate'], ['Burn'])
  .sum()
  .gte(1)
  .unmask(0)
  .updateMask(MaskLand.eq(1))
  .clip(Aus)  // Clip to Australian region
  .reproject({crs: 'EPSG:4326', scale: scale}); 

// Export burn mask to Asset
Export.image.toAsset({
  image: Firemask, 
  description: 'BurnMask_Aus', 
  assetId: 'projects/ee-my-rishi/assets/Firemask_Aus', 
  scale: scale, 
  crs: 'EPSG:4326',
});

/////////////////////////////////////
// Step 2: Load Predictor Variables
/////////////////////////////////////

// Load GLDAS soil moisture data
var soilMoisture = ee.ImageCollection("NASA/GLDAS/V021/NOAH/G025/T3H")
  .filterDate(startDate, endDate)
  .select('SoilTMP0_10cm_inst')
  .max()
  .reproject({crs: 'EPSG:4326', scale: scale});

// Load precipitation data
var precipitation = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
  .filterDate(startDate, endDate)
  .select('precipitation')
  .mean()
  .reproject({crs: 'EPSG:4326', scale: scale});

// Load temperature data
var temperature = ee.ImageCollection('IDAHO_EPSCOR/TERRACLIMATE')
  .filterDate(startDate, endDate)
  .select('tmmx')  // Max temperature example
  .mean()
  .reproject({crs: 'EPSG:4326', scale: scale});

// Load land cover dataset
var mcd12q1 = ee.ImageCollection('MODIS/061/MCD12Q1')
  .filter(ee.Filter.date('2019-01-01', '2019-09-01'))
  .first();
var landCoverBand = mcd12q1.select('LC_Type1');

// NDVI dataset from MODIS
var NDVI = ee.ImageCollection('MODIS/006/MOD13A2')
  .filterDate(startDate, endDate)
  .select('NDVI')
  .mean()
  .reproject({crs: 'EPSG:4326', scale: scale});

// Elevation dataset
var elevation = ee.Image('USGS/SRTMGL1_003')
  .select('elevation')
  .reproject({crs: 'EPSG:4326', scale: scale});

// Reproject all bands to the desired scale
var landCoverReprojected = landCoverBand.reproject({crs: 'EPSG:4326', scale: scale});
var NDVIReprojected = NDVI.reproject({crs: 'EPSG:4326', scale: scale});
var elevationReprojected = elevation.reproject({crs: 'EPSG:4326', scale: scale});

// Combine predictor variables into one image
var predictorImage = ee.Image([landCoverReprojected.rename('LandCover'),
                               NDVIReprojected.rename('NDVI'),
                               elevationReprojected.rename('Elevation'),
                               //soilMoisture.rename('SoilTMP0_10cm_inst'),
                               precipitation.rename('Precipitation'),
                               temperature.rename('Temperature')]);


/////////////////////////////////////
// Step 3: Stratified Sampling and Oversampling Burned Areas
/////////////////////////////////////

// Stratified sampling based on burn mask
var Aus_PointCloud = Firemask.stratifiedSample({
  numPoints: num_points, 
  classBand: 'Burn',
  region: Aus, 
  scale: scale,  
  projection: 'EPSG:4326', 
  seed: 0,
  tileScale: 16,
  geometries: true 
});

// Add latitude and longitude
var Aus_PointCloud_with_coords = Aus_PointCloud.map(function(feature) {
  var geom = feature.geometry().coordinates();
  var longitude = geom.get(0);
  var latitude = geom.get(1);
  return feature.set('longitude', longitude).set('latitude', latitude);
});

// Oversampling the minority class (burned areas)
var burnedSamples = Aus_PointCloud_with_coords.filter(ee.Filter.eq('Burn', 1));
var nonBurnedSamples = Aus_PointCloud_with_coords.filter(ee.Filter.eq('Burn', 0));

// Oversample the burned class
var oversampledBurned = burnedSamples.randomColumn('random').limit(nonBurnedSamples.size());

// Merge oversampled burned areas with non-burned areas
var balancedSample = oversampledBurned.merge(nonBurnedSamples);

/////////////////////////////////////
// Step 4: Train the Classifier
/////////////////////////////////////

// Prepare the training data
var trainingData = predictorImage.sampleRegions({
  collection: balancedSample,
  properties: ['Burn'],
  scale: scale, 
});

// Gradient Boosting Classifier with modified hyperparameters
var numberOfTrees = 3000; // Increase number of trees for better accuracy
var shrinkage = 0.001;      // Lower the learning rate for better training
var samplingRate = 0.8;   // Adjusted sampling rate for stochastic tree boosting
var maxNodes = 512;       // Allow more nodes to capture complex patterns

var classifier = ee.Classifier.smileGradientTreeBoost(3000, 0.001, 0.8, 512)
  .train({
    features: trainingData,
    classProperty: 'Burn',
    inputProperties: predictorImage.bandNames() 
});

/////////////////////////////////////
// Step 5: Classify and Clip the Image
/////////////////////////////////////

// Classify the image using the trained classifier and clip to Australia
var classifiedImage = predictorImage.classify(classifier);

// Reproject the classified image to ensure it's at the desired scale
classifiedImage = classifiedImage.reproject({crs: 'EPSG:4326', scale: scale});

/////////////////////////////////////
// Step 6: Add Map Layers for Visualization
/////////////////////////////////////

// Add layers for visualization
Map.addLayer(classifiedImage, {min: 0, max: 1, palette: ['green', 'red']}, 'Burned Area Classification');
Map.addLayer(Firemask, {min: 0, max: 1, palette: ['black', 'orange']}, 'Burn Mask');

// Center map on the Australia region
Map.centerObject(Aus, 4);


/////////////////////////////////////
// Step 7: Export Classified Image to Drive
/////////////////////////////////////

// Export classified image clipped to Australia
Export.image.toDrive({
  image: classifiedImage,
  description: 'Burned_Area_Aus_2021',
  scale: scale,
  region: Aus, 
  fileFormat: 'GeoTIFF',
});


/////////////////////////////////////
// Step 8: Cross-Validation and Testing
/////////////////////////////////////

// Split the dataset into 70% training and 30% testing
var sampleSplit = 0.70;
var split = balancedSample.randomColumn('random_split');

// Select training and testing data
var trainingPoints = split.filter(ee.Filter.lte('random_split', sampleSplit)); 
var testingPoints = split.filter(ee.Filter.gt('random_split', sampleSplit));   

// Train classifier on training data
var trainingData = predictorImage.sampleRegions({
  collection: trainingPoints,
  properties: ['Burn'], 
  scale: scale, 
});
classifier = ee.Classifier.smileGradientTreeBoost(numberOfTrees, shrinkage, samplingRate, maxNodes)
  .train({
    features: trainingData,
    classProperty: 'Burn',
    inputProperties: predictorImage.bandNames()
  });

// Test classifier on testing data
var testingData = predictorImage.sampleRegions({
  collection: testingPoints,
  properties: ['Burn'], 
  scale: scale,
});
var classifiedTestingPoints = testingData.classify(classifier);

// Evaluate predicted vs actual burn labels
var testingResults = classifiedTestingPoints.map(function(feature) {
  return feature.set('predicted', feature.get('classification')).set('actual', feature.get('Burn'));
});

// Confusion matrix
var confusionMatrix = testingResults.errorMatrix('actual', 'predicted');

// Print confusion matrix and accuracy metrics
print('Confusion Matrix:', confusionMatrix);
print('Overall Accuracy:', confusionMatrix.accuracy());
print('Kappa:', confusionMatrix.kappa());
print('Producer\'s Accuracy:', confusionMatrix.producersAccuracy());
print('Consumer\'s Accuracy:', confusionMatrix.consumersAccuracy());

// Export results to Drive
Export.table.toDrive({
  collection: testingResults.select(['actual', 'predicted', 'latitude', 'longitude']),
  description: 'Confusion_Matrix',
  folder: myDriveFolder,
  fileFormat: 'csv'
});
