var NDVI = ee.ImageCollection("MODIS/061/MOD13A2"),
    Modis = ee.ImageCollection("MODIS/061/MCD64A1"),
    hansen = ee.Image("UMD/hansen/global_forest_change_2023_v1_11"),
    suomi_viirs = ee.ImageCollection("NASA/LANCE/SNPP_VIIRS/C2"),
    lst = ee.ImageCollection("MODIS/061/MOD11A1"),
    gaul = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level0"),
    lulc = ee.ImageCollection("MODIS/061/MCD12C1");
// Drive Folder to store the Exports
var myDriveFolder = 'GEE_Exports'; 
var scale = 500; 
var num_points = 1000; 

// Start Date and End Date
var startDate = ee.Date('2021-01-01'); 
var endDate = ee.Date('2021-12-31');

// Region of Interest: Australia
var Aus = gaul.filter(ee.Filter.eq('ADM0_NAME', 'Australia'));

////////////////////////////////////////////////////////////
//////Step 1: Burned Areas from MODIS Dataset///////////////
////////////////////////////////////////////////////////////
var Modis = ee.ImageCollection("MODIS/061/MCD64A1")
              .filter(ee.Filter.date('2021-01-01','2021-12-31'))
              .filterBounds(Aus);

var burned = Modis.select('BurnDate');

// Function to compute the burned area for each date
var computeBurnedArea = function(image) {
  var burnDate = image.select('BurnDate');
  
  // Create a mask for burned areas (only pixels with a burn date)
  var burnedMask = burnDate.gt(0);
  
  // Calculate the area of burned pixels in square meters
  var areaImage = ee.Image.pixelArea().updateMask(burnedMask);
  
  // Sum the burned area (in square meters) for each unique burn date
  var burnedArea = areaImage.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: Aus.geometry(),
    scale: 500,  // MODIS scale is 500 meters
    maxPixels: 1e13
  });
  
  // Convert the area from square meters to hectares (1 hectare = 10,000 mÂ²)
  var burnedAreaHectares = ee.Number(burnedArea.get('area')).divide(10000);
  
  // Return the burn date and the corresponding burned area
  return ee.Feature(null, {
    'burnDate': ee.Date(image.get('system:time_start')).format('YYYY-MM-dd'),
    'burnedAreaHectares': burnedAreaHectares
  });
};

// Map over the image collection to compute burned area for each date
var burnedAreaFeatures = burned.map(computeBurnedArea);

// Convert to a FeatureCollection
var burnedAreaCollection = ee.FeatureCollection(burnedAreaFeatures);

// Print the results
print('Burned Area Collection:', burnedAreaCollection);

// Export the results to Google Drive as a CSV
Export.table.toDrive({
  collection: burnedAreaCollection,
  description: 'Burned_Area_2021',
  folder: 'GEE_Exports',  // Specify the folder in Google Drive
  fileNamePrefix: 'Burned_Area_2021',
  fileFormat: 'CSV'
});

// Visualization Parameters
var VisParams = {
  min: 30,
  max: 355,
  palette: [
    'ffffcc', 'ffeda0', 'fed976', 'feb24c',
    'fd8d3c', 'fc4e2a', 'e31a1c', 'bd0026', '800026'
  ]
};

// Map the maximum burn date image
var ba = burned.max().clip(Aus);

// Center the map and add the burned area layer
Map.centerObject(Aus, 5);
Map.addLayer(ba, VisParams, 'Burned Area 2021');

////////////////////////////////////////////////////////////
////// Step 2: Loading Active Fires Dataset/////////////////
////////////////////////////////////////////////////////////

// Load Suomi NPP VIIRS Fire Data for the specified date range
var suomi_viirs = ee.ImageCollection('NASA/LANCE/SNPP_VIIRS/C2')
                      .filter(ee.Filter.date('2023-10-08', '2023-10-30'))
                      .filterBounds(Aus);

// Clip the fire dataset to the Australia boundary
var clippedDataset = suomi_viirs.map(function(image) {
  return image.clip(Aus);
});

// Categorize the Bright_ti4 values into 5 classes
var categorized = clippedDataset.map(function(image) {
  var category = ee.Image(0)  // Create an initial image with value 0

    .where(image.select('Bright_ti4').gte(260).and(image.select('Bright_ti4').lt(360)), 1)  // Yellow
    .where(image.select('Bright_ti4').gte(361).and(image.select('Bright_ti4').lt(520)), 2)  // Orange
    .where(image.select('Bright_ti4').gte(521).and(image.select('Bright_ti4').lt(680)), 3)  // Red
    .where(image.select('Bright_ti4').gte(681).and(image.select('Bright_ti4').lt(840)), 4)  // White
    .where(image.select('Bright_ti4').gte(841), 5);  // Dark Red

  return category.rename('Category').copyProperties(image, ['system:time_start']);
});

// Merge all categorized images into one (mosaic) to avoid duplicate points
var mergedCategorized = categorized.mosaic();

// Convert categorized pixels into points using reduceToVectors()
var firePoints = mergedCategorized.reduceToVectors({
  geometry: Aus.geometry(),
  scale: 500,  // Adjust resolution based on need
  geometryType: 'centroid',  // Extract centroids of fire pixels
  bestEffort: true,  // Avoid maxPixels error
  crs: 'EPSG:4326'
});

// Add color to each point based on the category
var coloredPoints = firePoints.map(function(feature) {
  var category = feature.get('label');  // 'label' contains the category from reduceToVectors
  var color = ee.String(
    ee.Algorithms.If(
      ee.Number(category).eq(1), 'yellow',
      ee.Algorithms.If(
        ee.Number(category).eq(2), 'orange',
        ee.Algorithms.If(
          ee.Number(category).eq(3), 'red',
          ee.Algorithms.If(
            ee.Number(category).eq(4), 'white', 'darkred'
          )
        )
      )
    )
  );
  return feature.set({'Color': color});
});

// Export fire points as CSV
Export.table.toDrive({
  collection: coloredPoints,
  description: 'Categorized_FirePixels_Australia',
  fileFormat: 'CSV',
  selectors: ['longitude', 'latitude', 'label', 'Color'],  // Select properties to export
});

/////////////////////////////////////////////////////////////
// Step 3: Loading Land Surface Temperature Dataset//////////
/////////////////////////////////////////////////////////////

///Import Modis LST collection
var lst = ee.ImageCollection("MODIS/061/MOD11A1");

//Filter LST collection as per your Date Range
var mod = lst.filterDate('2019-01-01','2019-12-31');

// Select the band you want to visualize
var modisLSTday = mod.select('LST_Day_1km');

// Convert Kelvin to celcius
var modisLSTc = modisLSTday.map(function(img){
  return img
  .multiply(0.02)
  .subtract(273.15)
  .copyProperties(img,['system:time_start']);
});

//calculate Mean temperature for australia in the year
var clippedLSTc = modisLSTc.mean().clip(Aus);

//Add Clipped Layer to the Map
Map.addLayer(clippedLSTc,{
  min:10,
  max:45,
  palette:['blue','limegreen','yellow','darkorange','red']
},'Mean Temperature of 2023');
  
// Exporting Clipped LST with Australia
Export.image.toDrive({
  image: clippedLSTc,  
  description: 'LandSurfTemp_Aus_2019', 
  folder: 'GEE_Exports',
  scale: 1000, 
  crs: 'EPSG:4326',
  fileFormat:'GEOTIFF',
  maxPixels:1e10
  
});

/////////////////////////////////////////////////////////////
// Step 4: Loading Land Use Land Cover Dataset///////////////
/////////////////////////////////////////////////////////////

// Import the MODIS Land Cover dataset (MCD12C1) and filter by date
var lulc = ee.ImageCollection('MODIS/061/MCD12C1')
                .filter(ee.Filter.date('2022-01-01', '2022-12-31'))
                .filterBounds(Aus);  // Filter the collection to Australia

// Select the first image in the filtered collection
var image = lulc.first();

// Clip the image to the boundary of Australia
var imageClipped = image.clip(Aus);

// Define the remapping for land cover types
var lookupIn = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];  // Original IGBP Land Cover Type values
var lookupOut = [0,  // Water
                1,  // Forest
                1,  // Forest
                1,  // Forest
                1,  // Forest
                1,  // Forest
                2,  // Shrubs
                2,  // Shrubs
                3,  // Grass
                3,  // Grass
                4,  // Cropland
                4,  // Cropland
                5,  // Mixed Land
                5,  // Mixed Land
                6,  // Sparse
                7]; // Snow and Ice

// Reclassify the land cover band
var landCoverBand = imageClipped.select('Majority_Land_Cover_Type_1');
var classifiedLandCover = landCoverBand.remap({
  from: lookupIn,
  to: lookupOut,
  defaultValue: 7  // Default value for any undefined land cover type
}).rename('classified');

// Define visualization parameters for each land cover group
var visParams = {
  min: 0,
  max: 7,
  palette: ['blue', 'green', 'yellow', 'orange', 'red', 'gray', 'white']
};

// Add the classified land cover layer to the map
Map.addLayer(classifiedLandCover, visParams, 'Classified Land Cover (Aus)');

// Calculate pixel area (in square meters)
var pixelArea = ee.Image.pixelArea();

// Create an image where the value is the land cover type and multiply by pixel area
var landCoverArea = classifiedLandCover.multiply(pixelArea);

// Calculate and print the area for each land cover group
var areaByLandCoverGroup = landCoverArea.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: Aus.geometry(),
  scale: 500,  // Adjust scale as needed based on the dataset resolution
  maxPixels: 1e13
});
// Print the Total Land Cover
print('Area by Land Cover Group (square meters):', areaByLandCoverGroup);

// Define a function to compute the area for a specific land cover type
function computeArea(landCoverValue) {
  var mask = classifiedLandCover.eq(landCoverValue);
  var areaImage = mask.multiply(pixelArea);
  var area = areaImage.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: Aus.geometry(),
    scale: 500,  // Adjust scale as needed based on the dataset resolution
    maxPixels: 1e13
  });
  var areaInSquareKilometers = ee.Number(area.get('classified')).divide(1e6);
  return areaInSquareKilometers;
}

// Compute area for each land cover type
var areaWater = computeArea(0);
var areaForest = computeArea(1);
var areaShrubs = computeArea(2);
var areaGrass = computeArea(3);
var areaCropland = computeArea(4);
var areaMixedLand = computeArea(5);
var areaSparse = computeArea(6);
var areaSnowIce = computeArea(7);

// Print the results
print('Area of Water (square kilometeres):', areaWater);
print('Area of Forest (square kilometeres):', areaForest);
print('Area of Shrubs (square kilometeres):', areaShrubs);
print('Area of Grass (square kilometeres):', areaGrass);
print('Area of Cropland (square kilometeres):', areaCropland);
print('Area of Mixed Land (square kilometeres):', areaMixedLand);
print('Area of Sparse (square kilometeres):', areaSparse);
print('Area of Snow/Ice (square kilometeres):', areaSnowIce);

// Export LULC clipped to Australia
Export.image.toDrive({
  image: classifiedLandCover,
  description: 'LULC_Aus_2022',
  folder:'GEE_Exports',
  maxPixels: 1e13,
  scale: 500,
  region: Aus, 
  fileFormat: 'GeoTIFF',
  crs: 'EPSG:4326'
});

// Create a list to hold the area features
var areaFeatures = [];

// Function to add land cover area to the feature collection
function addAreaFeature(name, area) {
  var feature = ee.Feature(null, {
    'Land Cover Type': name,
    'Area (sq km)': area
  });
  areaFeatures.push(feature);
}

// Compute area for each land cover type and add to features
addAreaFeature('Water', areaWater);
addAreaFeature('Forest', areaForest);
addAreaFeature('Shrubs', areaShrubs);
addAreaFeature('Grass', areaGrass);
addAreaFeature('Cropland', areaCropland);
addAreaFeature('Mixed Land', areaMixedLand);
addAreaFeature('Sparse', areaSparse);
addAreaFeature('Snow/Ice', areaSnowIce);

// Create a FeatureCollection from the area features
var areaFeatureCollection = ee.FeatureCollection(areaFeatures);

// Print the FeatureCollection to verify
print('Area Feature Collection:', areaFeatureCollection);

// Export the area feature collection as a CSV file
Export.table.toDrive({
  collection: areaFeatureCollection,
  description: 'LandCoverArea_Australia_2020',
  folder: 'GEE_Exports',
  fileFormat: 'CSV'
});

/////////////////////////////////////////////////////////////
/////////// Step 5: Loading NDVI Dataset/////////////////////
/////////////////////////////////////////////////////////////

// Load the NDVI dataset
var NDVI = ee.ImageCollection("MODIS/006/MOD13A2")
            .select('NDVI') // Select the NDVI band
            .filterBounds(Aus); // Filter for your region

// Define years and months
var years = ee.List.sequence(2010, 2021, 1);
var months = ee.List.sequence(1, 12, 1);

// Create Monthly NDVI ImageCollection
var NDVI_Monthly = ee.ImageCollection.fromImages(
  years.map(function(y) {
    return months.map(function(m) {
      var filtered_Monthly = NDVI.filter(ee.Filter.calendarRange(y, y, 'year'))
                                 .filter(ee.Filter.calendarRange(m, m, 'month'))
                                 .mean(); // Mean NDVI for the month
      return filtered_Monthly.set('year', y)
                             .set('month', m)
                             .set('system:time_start', ee.Date.fromYMD(y, m, 1).millis());
    });
  }).flatten()
);

print(NDVI_Monthly, 'NDVI_Monthly');

// Add the first month's NDVI to the map
Map.addLayer(NDVI_Monthly.first().clip(Aus), 
             {min: -2000, max: 10000, palette: ['blue', 'white', 'green']}, 
             'NDVI First Month');

// Create a chart to visualize NDVI over time
var NDVI_TimeSeries = ui.Chart.image.series({
  imageCollection: NDVI_Monthly, 
  region: Aus, 
  reducer: ee.Reducer.mean(), 
  scale: 5000, // Adjust scale based on your dataset
  xProperty: 'system:time_start'
})
.setOptions({
  title: 'NDVI Time Series',
  hAxis: {title: 'Time'},
  vAxis: {title: 'NDVI'},
  lineWidth: 2,
  pointSize: 3,
  colors: ['green']
});

// Print the chart to the console
print(NDVI_TimeSeries);

// Exporting NDVI
Export.image.toDrive({
  image: NDVI_Monthly,  
  description: 'NDVI', 
  folder: 'GEE_Exports',
  scale: 1000, 
  crs: 'EPSG:4326',
  fileFormat:'GEOTIFF',
  maxPixels:1e10
  
});
/////////////////////////////////////////////////////////////
//// Step 6: Loading Global Forest Change Dataset////////////
/////////////////////////////////////////////////////////////

// Select the 'loss' band of Hansen Dataset
var forestLoss = hansen.select(['loss']);

// Define the period of interest
var startYear = 2020;
var endYear = 2022;

// Filter the dataset to the period of interest
var lossYear = hansen.select(['lossyear']);
var forestLossPeriod = lossYear.gte(startYear - 2020).and(lossYear.lte(endYear - 2020));

// Mask the loss image to the period of interest
var forestLossMasked = forestLoss.updateMask(forestLossPeriod);

// Calculate the area of forest loss in square meters
var forestLossArea = forestLossMasked.multiply(ee.Image.pixelArea());

// Reduce the region to get the total forest loss area within Australia
var stats = forestLossArea.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: Aus,
  scale: 500,
  maxPixels: 1e13
});

// Print the total forest loss area in hectares (ha)
var totalLossAreaHa = ee.Number(stats.get('loss')).divide(1e4); // from m^2 to ha
print('Total forest loss area in Australia (ha):', totalLossAreaHa);

// Visualize the results
Map.addLayer(forestLossMasked.clip(Aus), {min: 0, max: 1, palette: ['red']}, 'Forest Loss 2000-2022');
